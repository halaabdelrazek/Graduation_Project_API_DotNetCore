// <auto-generated />
using System;
using DataAccessLayer.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MartDBContext))]
    partial class MartDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Accessories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.CardioEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("CardioEquipments");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Carrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Carrier_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carrier_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ContactDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Laptop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPUModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPUSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<string>("GraphicsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HDDSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("MemorySpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProcessorCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SSDSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TotalUSBPorts")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Laptops");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.MakeUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SkinTone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkinType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("MakeUps");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.MobilePhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellularTechnology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<string>("DisplayType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("MemoryRAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpreatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SIMCardSlotCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("MobilePhones");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Monitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RefreshRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarrierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliverDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.PCGaming", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPUSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<string>("GraphicsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("MemorySpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("PCGamings");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Perfume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Scent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Volume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Perfumes");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ProductCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardioEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LaptopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MakeUpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MobilePhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PCGamingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PerfumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoesSportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportsSupplementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TabletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessoriesId");

                    b.HasIndex("CardioEquipmentId");

                    b.HasIndex("LaptopId");

                    b.HasIndex("MakeUpId");

                    b.HasIndex("MobilePhoneId");

                    b.HasIndex("MonitorId");

                    b.HasIndex("PCGamingId");

                    b.HasIndex("PerfumeId");

                    b.HasIndex("ShoesSportId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("SportsSupplementsId");

                    b.HasIndex("TabletId");

                    b.ToTable("ProductCart");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardioEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LaptopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MakeUpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MobilePhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PCGamingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PerfumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoesSportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportsSupplementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TabletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessoriesId");

                    b.HasIndex("CardioEquipmentId");

                    b.HasIndex("LaptopId");

                    b.HasIndex("MakeUpId");

                    b.HasIndex("MobilePhoneId");

                    b.HasIndex("MonitorId");

                    b.HasIndex("PCGamingId");

                    b.HasIndex("PerfumeId");

                    b.HasIndex("ShoesSportId");

                    b.HasIndex("SportsSupplementsId");

                    b.HasIndex("TabletId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ProductOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardioEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LaptopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MakeUpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MobilePhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PCGamingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PerfumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoesSportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportsSupplementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TabletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessoriesId");

                    b.HasIndex("CardioEquipmentId");

                    b.HasIndex("LaptopId");

                    b.HasIndex("MakeUpId");

                    b.HasIndex("MobilePhoneId");

                    b.HasIndex("MonitorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PCGamingId");

                    b.HasIndex("PerfumeId");

                    b.HasIndex("ShoesSportId");

                    b.HasIndex("SportsSupplementsId");

                    b.HasIndex("TabletId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CardioEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LaptopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MakeUpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MobilePhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PCGamingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PerfumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShoesSportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SportsSupplementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TabletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccessoriesId");

                    b.HasIndex("CardioEquipmentId");

                    b.HasIndex("LaptopId");

                    b.HasIndex("MakeUpId");

                    b.HasIndex("MobilePhoneId");

                    b.HasIndex("MonitorId");

                    b.HasIndex("PCGamingId");

                    b.HasIndex("PerfumeId");

                    b.HasIndex("ShoesSportId");

                    b.HasIndex("SportsSupplementsId");

                    b.HasIndex("TabletId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviewes");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ShoesSport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoesSports");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.SportsSupplements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<string>("Flavour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("SportsSupplements");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.SubCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Tablet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Avaiable_Units")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellularTechnology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount_Percent")
                        .HasColumnType("float");

                    b.Property<string>("DisplayType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("In_Stock")
                        .HasColumnType("bit");

                    b.Property<string>("MemoryRAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpreatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SIMCardSlotCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Tablets");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Avarage_Rateing")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Company_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.WishlistProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardioEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LaptopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MakeUpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MobilePhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PCGamingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PerfumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoesSportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportsSupplementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TabletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessoriesId");

                    b.HasIndex("CardioEquipmentId");

                    b.HasIndex("LaptopId");

                    b.HasIndex("MakeUpId");

                    b.HasIndex("MobilePhoneId");

                    b.HasIndex("MonitorId");

                    b.HasIndex("PCGamingId");

                    b.HasIndex("PerfumeId");

                    b.HasIndex("ShoesSportId");

                    b.HasIndex("SportsSupplementsId");

                    b.HasIndex("TabletId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistProducts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Accessories", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("Accessories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("Accessories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.CardioEquipment", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("CardioEquipments")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("CardioEquipments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ContactDetail", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.Order", "Order")
                        .WithOne("ContactDetail")
                        .HasForeignKey("DataAccessLayer.Data.ModelsDB.ContactDetail", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("ContactDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Laptop", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("Laptops")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("Laptops")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.MakeUp", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("MakeUp")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("MakeUp")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.MobilePhone", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("MobilePhones")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("MobilePhones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Monitor", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("Monitors")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("Monitors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.Carrier", "Carrier")
                        .WithMany("Orders")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrier");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.PCGaming", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("PCGamings")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("PCGamings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Perfume", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("Perfume")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("Perfume")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ProductCart", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.Accessories", "Accessories")
                        .WithMany("ProductCarts")
                        .HasForeignKey("AccessoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.CardioEquipment", "CardioEquipment")
                        .WithMany("ProductCarts")
                        .HasForeignKey("CardioEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Laptop", "Laptop")
                        .WithMany("ProductCarts")
                        .HasForeignKey("LaptopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MakeUp", "MakeUp")
                        .WithMany("ProductCarts")
                        .HasForeignKey("MakeUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MobilePhone", "MobilePhone")
                        .WithMany("ProductCarts")
                        .HasForeignKey("MobilePhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Monitor", "Monitor")
                        .WithMany("ProductCarts")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.PCGaming", "PCGaming")
                        .WithMany("ProductCarts")
                        .HasForeignKey("PCGamingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Perfume", "Perfume")
                        .WithMany("ProductCarts")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.ShoesSport", "ShoesSport")
                        .WithMany("ProductCarts")
                        .HasForeignKey("ShoesSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.ShoppingCart", "ShoppingCart")
                        .WithMany("ProductCarts")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.SportsSupplements", "SportsSupplements")
                        .WithMany("ProductCarts")
                        .HasForeignKey("SportsSupplementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Tablet", "Tablet")
                        .WithMany("ProductCarts")
                        .HasForeignKey("TabletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessories");

                    b.Navigation("CardioEquipment");

                    b.Navigation("Laptop");

                    b.Navigation("MakeUp");

                    b.Navigation("MobilePhone");

                    b.Navigation("Monitor");

                    b.Navigation("PCGaming");

                    b.Navigation("Perfume");

                    b.Navigation("ShoesSport");

                    b.Navigation("ShoppingCart");

                    b.Navigation("SportsSupplements");

                    b.Navigation("Tablet");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ProductImage", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.Accessories", "Accessories")
                        .WithMany("ProductImages")
                        .HasForeignKey("AccessoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.CardioEquipment", "CardioEquipment")
                        .WithMany("ProductImages")
                        .HasForeignKey("CardioEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Laptop", "Laptop")
                        .WithMany("ProductImages")
                        .HasForeignKey("LaptopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MakeUp", "MakeUp")
                        .WithMany("ProductImages")
                        .HasForeignKey("MakeUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MobilePhone", "MobilePhone")
                        .WithMany("ProductImages")
                        .HasForeignKey("MobilePhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Monitor", "Monitor")
                        .WithMany("ProductImages")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.PCGaming", "PCGaming")
                        .WithMany("ProductImages")
                        .HasForeignKey("PCGamingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Perfume", "Perfume")
                        .WithMany("ProductImages")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.ShoesSport", "ShoesSport")
                        .WithMany("ProductImages")
                        .HasForeignKey("ShoesSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.SportsSupplements", "SportsSupplements")
                        .WithMany("ProductImages")
                        .HasForeignKey("SportsSupplementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Tablet", "Tablet")
                        .WithMany("ProductImages")
                        .HasForeignKey("TabletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessories");

                    b.Navigation("CardioEquipment");

                    b.Navigation("Laptop");

                    b.Navigation("MakeUp");

                    b.Navigation("MobilePhone");

                    b.Navigation("Monitor");

                    b.Navigation("PCGaming");

                    b.Navigation("Perfume");

                    b.Navigation("ShoesSport");

                    b.Navigation("SportsSupplements");

                    b.Navigation("Tablet");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ProductOrder", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.Accessories", "Accessories")
                        .WithMany("ProductOrders")
                        .HasForeignKey("AccessoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.CardioEquipment", "CardioEquipment")
                        .WithMany("ProductOrders")
                        .HasForeignKey("CardioEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Laptop", "Laptop")
                        .WithMany("ProductOrders")
                        .HasForeignKey("LaptopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MakeUp", "MakeUp")
                        .WithMany("ProductOrders")
                        .HasForeignKey("MakeUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MobilePhone", "MobilePhone")
                        .WithMany("ProductOrders")
                        .HasForeignKey("MobilePhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Monitor", "Monitor")
                        .WithMany("ProductOrders")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.PCGaming", "PCGaming")
                        .WithMany("ProductOrders")
                        .HasForeignKey("PCGamingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Perfume", "Perfume")
                        .WithMany("ProductOrders")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.ShoesSport", "ShoesSport")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ShoesSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.SportsSupplements", "SportsSupplements")
                        .WithMany("ProductOrders")
                        .HasForeignKey("SportsSupplementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Tablet", "Tablet")
                        .WithMany("ProductOrders")
                        .HasForeignKey("TabletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessories");

                    b.Navigation("CardioEquipment");

                    b.Navigation("Laptop");

                    b.Navigation("MakeUp");

                    b.Navigation("MobilePhone");

                    b.Navigation("Monitor");

                    b.Navigation("Order");

                    b.Navigation("PCGaming");

                    b.Navigation("Perfume");

                    b.Navigation("ShoesSport");

                    b.Navigation("SportsSupplements");

                    b.Navigation("Tablet");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Review", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.Accessories", null)
                        .WithMany("Reviews")
                        .HasForeignKey("AccessoriesId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.CardioEquipment", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CardioEquipmentId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Laptop", null)
                        .WithMany("Reviews")
                        .HasForeignKey("LaptopId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MakeUp", null)
                        .WithMany("Reviews")
                        .HasForeignKey("MakeUpId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MobilePhone", null)
                        .WithMany("Reviews")
                        .HasForeignKey("MobilePhoneId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Monitor", null)
                        .WithMany("Reviews")
                        .HasForeignKey("MonitorId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.PCGaming", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PCGamingId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Perfume", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PerfumeId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.ShoesSport", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ShoesSportId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.SportsSupplements", null)
                        .WithMany("Reviews")
                        .HasForeignKey("SportsSupplementsId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Tablet", null)
                        .WithMany("Reviews")
                        .HasForeignKey("TabletId");

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ShoesSport", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("ShoesSports")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("ShoesSports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ShoppingCart", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.SportsSupplements", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("SportsSupplements")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("SportsSupplements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.SubCategory", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Tablet", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.SubCategory", "SubCategory")
                        .WithMany("Tablets")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany("Tablets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Wishlist", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.WishlistProduct", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.Accessories", "Accessories")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("AccessoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.CardioEquipment", "CardioEquipment")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("CardioEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Laptop", "Laptop")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("LaptopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MakeUp", "MakeUp")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("MakeUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.MobilePhone", "MobilePhone")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("MobilePhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Monitor", "Monitor")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.PCGaming", "PCGaming")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("PCGamingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Perfume", "Perfume")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.ShoesSport", "ShoesSport")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("ShoesSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.SportsSupplements", "SportsSupplements")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("SportsSupplementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Tablet", "Tablet")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("TabletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.Wishlist", "Wishlist")
                        .WithMany("WishlistProduct")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessories");

                    b.Navigation("CardioEquipment");

                    b.Navigation("Laptop");

                    b.Navigation("MakeUp");

                    b.Navigation("MobilePhone");

                    b.Navigation("Monitor");

                    b.Navigation("PCGaming");

                    b.Navigation("Perfume");

                    b.Navigation("ShoesSport");

                    b.Navigation("SportsSupplements");

                    b.Navigation("Tablet");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Data.ModelsDB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Accessories", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.CardioEquipment", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Carrier", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Laptop", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.MakeUp", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.MobilePhone", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Monitor", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Order", b =>
                {
                    b.Navigation("ContactDetail")
                        .IsRequired();

                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.PCGaming", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Perfume", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ShoesSport", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.ShoppingCart", b =>
                {
                    b.Navigation("ProductCarts");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.SportsSupplements", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.SubCategory", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("CardioEquipments");

                    b.Navigation("Laptops");

                    b.Navigation("MakeUp");

                    b.Navigation("MobilePhones");

                    b.Navigation("Monitors");

                    b.Navigation("PCGamings");

                    b.Navigation("Perfume");

                    b.Navigation("ShoesSports");

                    b.Navigation("SportsSupplements");

                    b.Navigation("Tablets");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Tablet", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistProduct");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.User", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("CardioEquipments");

                    b.Navigation("ContactDetails");

                    b.Navigation("Laptops");

                    b.Navigation("MakeUp");

                    b.Navigation("MobilePhones");

                    b.Navigation("Monitors");

                    b.Navigation("PCGamings");

                    b.Navigation("Perfume");

                    b.Navigation("Reviews");

                    b.Navigation("ShoesSports");

                    b.Navigation("SportsSupplements");

                    b.Navigation("Tablets");
                });

            modelBuilder.Entity("DataAccessLayer.Data.ModelsDB.Wishlist", b =>
                {
                    b.Navigation("WishlistProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
